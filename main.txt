???????????????????????????????????????/1. Design a Lexical Analyzer in LEX to Recognize Patterns in C

%{
#include<stdio.h>
#include<string.h>
%}

%%
int             { printf("Keyword: int\n"); }
float           { printf("Keyword: float\n"); }
if|else         { printf("Keyword: %s\n", yytext); }
[a-zA-Z_][a-zA-Z0-9_]* { printf("Identifier: %s\n", yytext); }
[0-9]+          { printf("Number: %s\n", yytext); }
"+"|"-"|"*"|"/" { printf("Operator: %s\n", yytext); }
";"             { printf("Semicolon\n"); }
[ \t\n]         { /* Ignore whitespace */ }
.               { printf("Unknown character: %s\n", yytext); }
%%

int main() {
    yylex();
    return 0;
}

int yywrap() {
    return 1;
}

????????????????????????????/2. Implement the lexical analyzer using  flex

%{
#include <stdio.h>
#include <stdlib.h>
%}

%%
int             { printf("Keyword: int\n"); }
float           { printf("Keyword: float\n"); }
if|else         { printf("Keyword: %s\n", yytext); }
[a-zA-Z_][a-zA-Z0-9_]* { printf("Identifier: %s\n", yytext); }
[0-9]+          { printf("Number: %s\n", yytext); }
"+"|"-"|"*"|"/" { printf("Operator: %s\n", yytext); }
";"             { printf("Semicolon\n"); }
[ \t\n]+        { /* Ignore whitespace */ }
"//".*          { /* Ignore single-line comments */ }
"/\\*".*"\\*/"   { /* Ignore multi-line comments */ }
.               { printf("Unknown character: %s\n", yytext); }
%%

int main() {
    yylex();
    return 0;
}


?????????????????????????????????????????3. Write a program to implement to recognize a valid arithmetic expression that uses operator +, â€“ ,
* and /.


#include <stdio.h>
#include <ctype.h>

int main() {
    char c;
    int valid = 1;
    while ((c = getchar()) != EOF) {
        if (!(isdigit(c) || c == '+' || c == '-' || c == '*' || c == '/')) {
            valid = 0;
            break;
        }
    }
    if (valid)
        printf("Valid expression\n");
    else
        printf("Invalid expression\n");
    return 0;
}



???????????????????????4. Write a program to implement a Calculator using LEX and YACC

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>LEX Program:

lex
Copy code
%{
#include <stdio.h>
#include <stdlib.h>
%}

%%
[0-9]+  { yylval = atoi(yytext); return NUMBER; }
[+\-*/] { return yytext[0]; }
\n      { return 0; }
%%

int yywrap() { return 1; }

>>>>>>>>>>>>>>>>>>>>YACC Program:

yacc
Copy code
%{
#include <stdio.h>
#include <stdlib.h>
int yylex();
void yyerror(char *s) { printf("Error: %s\n", s); }
%}

%token NUMBER

%%

calculation: expression { printf("Result = %d\n", $1); }
           ;

expression: NUMBER          { $$ = $1; }
          | expression '+' NUMBER { $$ = $1 + $3; }
          | expression '-' NUMBER { $$ = $1 - $3; }
          | expression '*' NUMBER { $$ = $1 * $3; }
          | expression '/' NUMBER { $$ = $1 / $3; }
          ;

%%

int main() {
    yyparse();
    return 0;
}


????????????????????????????????????????????5.Program to recognize a valid variable

>>>>>>>>>>>>>>>>>>>>>>>>..LEX Program:

lex
Copy code
%{
#include <stdio.h>
%}

%%
[a-zA-Z][a-zA-Z0-9]*   { printf("Valid variable: %s\n", yytext); }
.                       { printf("Invalid variable\n"); }
%%

int main() {
    yylex();
    return 0;
}

???????????????????????????6. Write a LEX Program to convert the substring abc to ABC from the given input string

>>>>>>>>>>>>>>>>>>>>>>>>>>LEX Program:

lex
Copy code
%{
#include <stdio.h>
#include <string.h>
%}

%%
abc     { printf("ABC"); }
.       { putchar(yytext[0]); }
%%

int main() {
    yylex();
    return 0;
}


???????????????????????????????????????????/ 7. C Program for NFA Simulation
>>>>>>>>>>>>>>>>>>>>>>>>>>c
Copy code
#include <stdio.h>
#include <ctype.h>
#include <string.h>

// Function to simulate NFA for Identifiers
int is_identifier(char *str) {
    // The first character must be a letter or underscore
    if (isalpha(str[0]) || str[0] == '_') {
        // Subsequent characters must be alphanumeric or underscores
        for (int i = 1; str[i] != '\0'; i++) {
            if (!isalnum(str[i]) && str[i] != '_') {
                return 0; // Invalid identifier
            }
        }
        return 1; // Valid identifier
    }
    return 0; // Invalid identifier
}

// Function to simulate NFA for Constants (Numbers)
int is_constant(char *str) {
    for (int i = 0; str[i] != '\0'; i++) {
        if (!isdigit(str[i])) {
            return 0; // Invalid constant
        }
    }
    return 1; // Valid constant
}

// Function to simulate NFA for Operators
int is_operator(char *str) {
    // Valid operators are +, -, *, /
    if (strlen(str) == 1 && (str[0] == '+' || str[0] == '-' || str[0] == '*' || str[0] == '/')) {
        return 1; // Valid operator
    }
    return 0; // Invalid operator
}

int main() {
    char input[100];

    printf("Enter a string (identifier, constant, or operator): ");
    scanf("%s", input); // Read input string

    // Check if the input is a valid identifier
    if (is_identifier(input)) {
        printf("Valid Identifier: %s\n", input);
    }
    // Check if the input is a valid constant (integer)
    else if (is_constant(input)) {
        printf("Valid Constant: %s\n", input);
    }
    // Check if the input is a valid operator
    else if (is_operator(input)) {
        printf("Valid Operator: %s\n", input);
    }
    else {
        printf("Invalid input\n");
    }

    return 0;
}

???????????????????????????????? 8. Implement DFAs for Identifiers, Constants, and Operators

>>>>>>>>>>>>>>>>>>>>>>>>>The DFA structure is similar to NFAs but requires strict deterministic transitions:
#include <stdio.h>
#include <ctype.h>
#include <string.h>

// Function to simulate DFA for Identifiers
int is_identifier(char *str) {
    // The first character must be a letter or an underscore
    if (isalpha(str[0]) || str[0] == '_') {
        // Subsequent characters must be alphanumeric or underscores
        for (int i = 1; str[i] != '\0'; i++) {
            if (!isalnum(str[i]) && str[i] != '_') {
                return 0; // Invalid identifier
            }
        }
        return 1; // Valid identifier
    }
    return 0; // Invalid identifier
}

// Function to simulate DFA for Constants (Numbers)
int is_constant(char *str) {
    // A valid constant consists of only digits
    for (int i = 0; str[i] != '\0'; i++) {
        if (!isdigit(str[i])) {
            return 0; // Invalid constant
        }
    }
    return 1; // Valid constant
}

// Function to simulate DFA for Operators
int is_operator(char *str) {
    // A valid operator is one of the characters: +, -, *, /
    if (strlen(str) == 1 && (str[0] == '+' || str[0] == '-' || str[0] == '*' || str[0] == '/')) {
        return 1; // Valid operator
    }
    return 0; // Invalid operator
}

int main() {
    char input[100];

    printf("Enter a string (identifier, constant, or operator): ");
    scanf("%s", input); // Read input string

    // Check if the input is a valid identifier using DFA
    if (is_identifier(input)) {
        printf("Valid Identifier: %s\n", input);
    }
    // Check if the input is a valid constant (integer) using DFA
    else if (is_constant(input)) {
        printf("Valid Constant: %s\n", input);
    }
    // Check if the input is a valid operator using DFA
    else if (is_operator(input)) {
        printf("Valid Operator: %s\n", input);
    }
    else {
        printf("Invalid input\n");
    }

    return 0;
}


---

?????????????????????????9. Code Optimization Using Constant Folding
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>c program:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void constantFolding(char *expr) {
    int result = 0, num1 = 0, num2 = 0;
    char op;

    sscanf(expr, "%d %c %d", &num1, &op, &num2);

    switch (op) {
        case '+': result = num1 + num2; break;
        case '-': result = num1 - num2; break;
        case '*': result = num1 * num2; break;
        case '/': result = num1 / num2; break;
        default: printf("Invalid expression\n"); return;
    }

    printf("Original Expression: %s\n", expr);
    printf("Optimized Expression: %d\n", result);
}

int main() {
    char expr[100];
    printf("Enter a constant expression (e.g., 4 + 5): ");
    fgets(expr, 100, stdin);
    constantFolding(expr);
    return 0;
}


---

???????????????????????10. 8086 Backend Simulation

>>>>>>>>>>>>>>>>>>>>>>>>>>>This question requires translating three-address code into assembly-like instructions. Here's a basic implementation:

#include <stdio.h>
#include <string.h>

void generateAssembly(char *code) {
    char op[10], arg1[10], arg2[10], res[10];
    sscanf(code, "%s %s %s %s", res, arg1, op, arg2);

    printf("Assembly Code:\n");
    printf("MOV AX, %s\n", arg1);
    if (strcmp(op, "+") == 0)
        printf("ADD AX, %s\n", arg2);
    else if (strcmp(op, "-") == 0)
        printf("SUB AX, %s\n", arg2);
    else if (strcmp(op, "*") == 0)
        printf("MUL %s\n", arg2);
    else if (strcmp(op, "/") == 0)
        printf("DIV %s\n", arg2);
    printf("MOV %s, AX\n", res);
}

int main() {
    char code[100];
    printf("Enter a three-address code (e.g., t1 = a + b): ");
    fgets(code, 100, stdin);
    generateAssembly(code);
    return 0;
}


????????????????????11. Write a lex program to find out total number of vowels, and consonants from the given input
sting. 

>>>>>>>>>>>>>>>>>>>>>>>>>>>>. LEX Program:

lex
Copy code
%{
#include <stdio.h>
int vowels = 0, consonants = 0;
%}

%%
[aeiouAEIOU] { vowels++; }
[a-zA-Z]     { consonants++; }
.            { /* Ignore non-alphabetic characters */ }
\n           { return 0; }

%%

int main() {
    yylex();
    printf("Vowels: %d, Consonants: %d\n", vowels, consonants);
    return 0;
}

---

??????????????????????// 12. Write a program to implement to recognize a valid control structures syntax of C language using
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>..Corrected Version of the Lex Program:
c
Copy code
%{
#include <stdio.h>
%}

%option noyywrap

%%

"for"    { printf("Valid 'for' loop syntax\n"); }
"while"  { printf("Valid 'while' loop syntax\n"); }
[ \t\n]+ { /* Ignore spaces, tabs, and newlines */ }
.        { printf("Invalid syntax\n"); }

%%

int main() {
    printf("Enter a string:\n");
    yylex();  // Lexical analysis
    return 0;
}
??????????????????????????????????? 13. Recursive Descent Parser for Arithmetic Expressions

>>>>>>>>>>>>>>>>>>>> Yacc File (expr.y)
c
Copy code
%{
#include <stdio.h>
#include <stdlib.h>

// AST node structure
typedef struct ASTNode {
    int type;  // 0: number, 1: operator
    union {
        int num;            // number value
        struct {
            struct ASTNode *left;
            struct ASTNode *right;
            char op;
        };
    };
} ASTNode;

// Create new AST node
ASTNode* new_node(int type, int num, char op, ASTNode* left, ASTNode* right) {
    ASTNode* node = (ASTNode*)malloc(sizeof(ASTNode));
    node->type = type;
    if (type == 0) {
        node->num = num;
    } else {
        node->op = op;
        node->left = left;
        node->right = right;
    }
    return node;
}

// Print AST
void print_ast(ASTNode* root) {
    if (root->type == 0) {
        printf("%d", root->num);
    } else {
        printf("(");
        print_ast(root->left);
        printf(" %c ", root->op);
        print_ast(root->right);
        printf(")");
    }
}

%}

%token <num> NUMBER
%token PLUS MINUS TIMES DIVIDE LPAREN RPAREN

%%

expr:
    term                        { $$ = $1; }
    | expr PLUS term            { $$ = new_node(1, 0, '+', $1, $3); }
    | expr MINUS term           { $$ = new_node(1, 0, '-', $1, $3); }
    ;

term:
    factor                      { $$ = $1; }
    | term TIMES factor         { $$ = new_node(1, 0, '*', $1, $3); }
    | term DIVIDE factor        { $$ = new_node(1, 0, '/', $1, $3); }
    ;

factor:
    NUMBER                      { $$ = new_node(0, $1, 0, NULL, NULL); }
    | LPAREN expr RPAREN        { $$ = $2; }
    ;

%%

int yyerror(char *s) {
    fprintf(stderr, "Error: %s\n", s);
    return 0;
}

int main() {
    printf("Enter an expression: ");
    yyparse();
    return 0;
}
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Lex File (expr.l)
c
Copy code
%{
#include "y.tab.h"
%}

%%

[0-9]+        { yylval.num = atoi(yytext); return NUMBER; }
"+"           { return PLUS; }
"-"           { return MINUS; }
"*"           { return TIMES; }
"/"           { return DIVIDE; }
"("           { return LPAREN; }
")"           { return RPAREN; }
[ \t\n]+      { /* Ignore whitespace */ }
.             { return 0; }

%%

int yywrap() {
    return 1;
}

---

??????????????????? 14. Write a program to implement to recognize a valid control structures syntax of C language using
ifelse, if-else-if and switch-case.

>>>>>>>>>>>>>>>>>>. LEX Program:

lex
Copy code
%{
#include <stdio.h>
%}

IF      "if"
ELSE    "else"
SWITCH  "switch"
CASE    "case"
%%

{IF}    { printf("Valid 'if' statement\n"); }
{ELSE}  { printf("Valid 'else' statement\n"); }
{SWITCH}{ printf("Valid 'switch' statement\n"); }
{CASE}  { printf("Valid 'case' statement\n"); }
.       { printf("Invalid syntax\n"); }
%%

int main() {
    yylex();
    return 0;
}

---

?????????????????? 15.Write a program to Implement any one storage allocation strategies 

>>>>>>>>>>>> C program: 

#include <stdio.h>
#include <stdlib.h>

int main() {
    int *x = (int *)malloc(sizeof(int));
    *x = 10;
    printf("Allocated value: %d\n", *x);
    free(x);
    return 0;
}


---

???????????????????? 16. Write a program to Implement type checking. 
>>>>>>>>>>>>>>>>>>>>> c program:

#include <stdio.h>
#include <ctype.h>

int is_integer(char *str) {
    for (int i = 0; str[i] != '\0'; i++) {
        if (!isdigit(str[i])) return 0;
    }
    return 1;
}

int main() {
    char str[100];
    printf("Enter a value: ");
    scanf("%s", str);
    if (is_integer(str)) 
        printf("Integer type\n");
    else
        printf("Not an integer\n");
    return 0;
}


????????????????????????// 17. Write a program to Implement Simple Code Optimization Techniques using Strength reduction 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> c program :

#include <stdio.h>

int main() {
    int n, result = 0;
    printf("Enter the number of iterations: ");
    scanf("%d", &n);

    printf("Optimized Code:\n");
    for (int i = 0; i < n; i++) {
        printf("i: %d, result: %d\n", i, result);
        result += 2;  // Strength reduction: Use addition instead of multiplication
    }

    return 0;
}



---

??????????????????????????? 18. Write a program to implement to implement the symbol table

>>>>>>>>>>>>>>>C program: 

#include <stdio.h>
#include <string.h>

#define MAX 10

typedef struct {
    char name[50];
    char type[10];
} Symbol;

Symbol symbolTable[MAX];
int count = 0;

void insert(char *name, char *type) {
    if (count < MAX) {
        strcpy(symbolTable[count].name, name);
        strcpy(symbolTable[count].type, type);
        count++;
        printf("Inserted: %s\n", name);
    } else {
        printf("Symbol table is full.\n");
    }
}

void display() {
    printf("\nName\tType\n");
    for (int i = 0; i < count; i++) {
        printf("%s\t%s\n", symbolTable[i].name, symbolTable[i].type);
    }
}

int main() {
    insert("x", "int");
    insert("y", "float");
    display();
    return 0;
}


---

???????????????????????/19. Write a program to Implement Simple Code Optimization Techniques using Algebraic
transformation 

c program :

#include <stdio.h>

void optimize_code(int x, int y) {
    int result;

    // Original code: Using x * 1, x + 0
    result = x * 1 + y;   // Algebraic transformation: x * 1 is redundant
    printf("Original Code: result = %d\n", result);

    // Optimized code: Simplified using algebraic transformation
    result = x + y;  // Simplified by removing x * 1 and x + 0
    printf("Optimized Code: result = %d\n", result);
}

int main() {
    int x = 5, y = 3;
    optimize_code(x, y);
    return 0;
}



---

?????????????????????????????? 20. Write a program to generate three address code using LEX and YACC

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.. LEX Program (lexer.l):
lex
Copy code
%{
#include <stdio.h>
#include <stdlib.h>
%}

%%
[0-9]+  { yylval = atoi(yytext); return NUM; }
[+\-*/] { return OP; }
[ \t\n] { /* Ignore whitespaces */ }
.       { return yytext[0]; }
%%

int yywrap() { return 1; }

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.YACC Program (parser.y):
yacc
Copy code
%{
#include <stdio.h>
#include <stdlib.h>

int temp_var = 1;  // Counter for temporary variables

%}

%token NUM OP

%%

stmt: expr { printf("Result: temp%d = %d\n", temp_var-1, $1); }
    ;

expr: NUM      { printf("temp%d = %d\n", temp_var++, $1); }
    | expr OP NUM {
        printf("temp%d = temp%d %s %d\n", temp_var, temp_var-2, yytext, $3);
        if (yytext[0] == '+') $1 = $1 + $3;
        else if (yytext[0] == '-') $1 = $1 - $3;
        else if (yytext[0] == '*') $1 = $1 * $3;
        else $1 = $1 / $3;
        temp_var++;
    }
    ;

%%

int main() {
    printf("Enter an arithmetic expression: ");
    yyparse();
    return 0;
}
